AWSTemplateFormatVersion: 2010-09-09
Description: VPC Configuration with 3 public subnets

# A decent calculator to determine subnet CIDR blocks
# https://network00.com/NetworkTools/IPv4SubnetCreator/

Parameters:
  EnvironmentName:
    Description: An environment name prefixed to resource names and tags
    Type: String

  VpcCIDR:
    Description: The IP range (CIDR notation) for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the first availability zone
    Type: String
    Default: 10.0.0.0/20
  PublicSubnet2CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the second availability zone
    Type: String
    Default: 10.0.16.0/20
  PublicSubnet3CIDR:
    Description: The IP range (CIDR notation) for the public subnet in the third availability zone
    Type: String
    Default: 10.0.32.0/20

  PrivateSubnet1CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the first availability zone
    Type: String
    Default: 10.0.48.0/20
  PrivateSubnet2CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the second availability zone
    Type: String
    Default: 10.0.64.0/20
  PrivateSubnet3CIDR:
    Description: The IP range (CIDR notation) for the private subnet in the third availability zone
    Type: String
    Default: 10.0.80.0/20

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment"
        Parameters:
          - EnvironmentName
      - Label:
          default: "VPC Configuration"
        Parameters:
          - VpcCIDR
      - Label:
          default: "Public Subnet Configuration"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PublicSubnet3CIDR
      - Label:
          default: "Private Subnet Configuration"
          Parameters:
            - PrivateSubnet1CIDR
            - PrivateSubnet2CIDR
            - PrivateSubnet3CIDR

Resources:

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-internet-gateway'

  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPCInternetGateway
      VpcId: !Ref MyVPC

  # route table to be attached to all public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref EnvironmentName, 'PUBLIC-route-table']]

  # All public subnets have access to internet
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway

  #----------------
  # PUBLIC SUBNETS
  #----------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, '-PUBLIC-subnet1(', !Select [ 0, !GetAZs  '' ], ')']]
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet1NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
  PublicSubnet1NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, '-PUBLIC-subnet2(', !Select [ 1, !GetAZs  '' ], ')']]
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet2NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
  PublicSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, '-PUBLIC-subnet3(', !Select [ 2, !GetAZs  '' ], ')']]
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PublicSubnet3NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
  PublicSubnet3NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PublicSubnet3NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet3

  #----------------
  # PRIVATE SUBNETS
  #----------------
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, '-PRIVATE-subnet1(', !Select [ 0, !GetAZs  '' ], ')']]
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref EnvironmentName, 'PRIVATE-subnet1-route-table']]
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet1NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet1NatGateway

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, '-PRIVATE-subnet2(', !Select [ 1, !GetAZs  '' ], ')']]
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref EnvironmentName, 'PRIVATE-subnet2-route-table']]
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet2NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet2NatGateway

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref EnvironmentName, '-PRIVATE-subnet3(', !Select [ 2, !GetAZs  '' ], ')']]
  PrivateSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref EnvironmentName, 'PRIVATE-subnet3-route-table']]
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateSubnet3NatGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet3NatGateway

  #----------------
  # PUBLIC SSH ACCESS SECURITY GROUP
  #----------------

  PublicWebAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-sg-ssh-public
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-webaccess'
  PublicWebAccessIngressIPv4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PublicWebAccessSecurityGroup.GroupId
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 22
      ToPort: 22
      Description: IPv4 SSH Access from Anywhere
  PublicWebAccessIngressIPv6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PublicWebAccessSecurityGroup.GroupId
      IpProtocol: tcp
      CidrIpv6: ::/0
      FromPort: 22
      ToPort: 22
      Description: IPv6 SSH Access from Anywhere

  #----------------
  # INTERNAL SSH ACCESS SECURITY GROUP
  #----------------
  InternalAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-sg-ssh-private
      VpcId: !Ref MyVPC
  InternalAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt InternalAccessSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref PublicWebAccessSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      Description: SSH Access only from instances having PublicWebAccessSecurityGroup

Outputs:
  MyVPC:
    Description: A reference to the created VPC
    Value: !Ref MyVPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3

  PublicSSHSecurityGroup:
    Description: Public Access SSH Security Group
    Value: !Ref PublicWebAccessSecurityGroup

  PrivateSSHSecurityGroup:
    Description: Private Access SSH Security Group
    Value: !Ref InternalAccessSecurityGroup