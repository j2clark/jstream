AWSTemplateFormatVersion: 2010-09-09
Description: Private REST API Application - Only available from within private subnet

# https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html

# Access: <api_id>.execute-api.<region>.amazonaws.com

Parameters:
  EnvironmentName:
    Description: An environment name prefixed to resource names and tags
    Type: String

Mappings:
  CIDR:
    us-east-1:
      VPC: 10.0.0.0/16
      PublicSubnets:
        - 10.0.0.0/20
        - 10.0.16.0/20
        - 10.0.32.0/20
        - 10.0.48.0/20
        - 10.0.64.0/20
        - 10.0.80.0/20
      PrivateSubnets:
        - 10.0.96.0/20
        - 10.0.112.0/20
        - 10.0.128.0/20
        - 10.0.144.0/20
        - 10.0.160.0/20
        - 10.0.176.0/20

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ['CIDR', !Ref AWS::Region, 'VPC']
#      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-internet-gateway'
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPCInternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'PUBLIC-route-table' ] ]
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCInternetGateway


  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Select
        - 0
        - !FindInMap ['CIDR', !Ref AWS::Region, 'PublicSubnets']
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref EnvironmentName, '-PUBLIC-subnet(', !Select [ 0, !GetAZs ''], ')' ] ]
  PublicSubnetRouteTableAssociation1a:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1a

  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: !Select
        - 0
        - !FindInMap ['CIDR', !Ref AWS::Region, 'PrivateSubnets']
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref EnvironmentName, '-PRIVATE-subnet(', !Select [ 0, !GetAZs ''], ')' ] ]
  PrivateSubnetRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentName, 'PRIVATE-route-table(', !Select [ 0, !GetAZs ''], ')' ] ]
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable1a
      SubnetId: !Ref PrivateSubnet1a

  PublicSSHAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-sg-ssh-public
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-ssh-access'
  PublicWebAccessIngressIPv4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PublicSSHAccessSecurityGroup.GroupId
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 22
      ToPort: 22
      Description: IPv4 SSH Access from Anywhere
  PublicSSHAccessIngressIPv6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PublicSSHAccessSecurityGroup.GroupId
      IpProtocol: tcp
      CidrIpv6: ::/0
      FromPort: 22
      ToPort: 22
      Description: IPv6 SSH Access from Anywhere

  PrivateSSHAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${EnvironmentName}-private-ssh-access'
      VpcId: !Ref VPC
  PrivateSSHAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PrivateSSHAccessSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref PublicSSHAccessSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      Description: !Sub 'SSH Access only from instances from security group ${PublicSSHAccessSecurityGroup}'

  PrivateRestAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${EnvironmentName}-private-restapi-access'
      VpcId: !Ref VPC
  PrivateRestAPIAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt PrivateRestAPISecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !GetAtt VPC.CidrBlock
      Description: !Sub 'RestAPI Access from within VPC'

  PrivateRestAPIEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Join ['.', ['com.amazonaws', !Ref AWS::Region, 'execute-api']]
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      SubnetIds:
        - Ref: PrivateSubnet1a
      SecurityGroupIds:
        - Ref: PrivateRestAPISecurityGroup


  ApiGatewayAccountRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ApiGatewayAccountRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-ApiGateway-AppendToLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  PrivateRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ['-', [!Ref EnvironmentName, !Ref AWS::StackName]]
      EndpointConfiguration:
        Types:
          - PRIVATE
        VpcEndpointIds:
          - !Ref PrivateRestAPIEndpoint
      Policy:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: execute-api:Invoke
#            Resource: !Join [':', ['arn:aws:execute-api', !Ref AWS::Region, !Ref AWS::AccountId, '*/*']]
            Resource: 'execute-api:/*'
            Condition:
              StringNotEquals:
                "aws:sourceVpc": !Ref VPC
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
#            Resource: !Join [ ':', [ 'arn:aws:execute-api', !Ref AWS::Region, !Ref AWS::AccountId, '*/*' ] ]
            Resource: 'execute-api:/*'

#  RestApiAccount:
#    Type: AWS::ApiGateway::Account
#    Properties:
#      CloudWatchRoleArn: !Sub
#        - ${ImportedPrivateApiGatewayAccountRoleArn}
#        - ImportedPrivateApiGatewayAccountRoleArn: !ImportValue
#            'Fn::Sub': "${EnvironmentName}-PrivateApiGatewayAccountRoleArn"
#
#  RestApiLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Join [ '-', [ !Ref EnvironmentName, !Ref AWS::StackName ] ]
#      RetentionInDays: 1
#
#  PrivateRestApiPolicy:
#    Type: AWS::IAM::Policy
#    Properties:
#      PolicyName: !Sub ${EnvironmentName}-PrivateRestAPIPolicy
#      PolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: Deny
##            Principal: "*"
#            Action: execute-api:Invoke
#            Resource: !Join [':', ['arn:aws:execute-api', !Ref AWS::Region, !Ref AWS::AccountId, '*/*/*/*']]
#            Condition:
#              StringNotEquals:
#                aws:sourceVpc: !Ref VpcId
#          - Effect: Allow
##            Principal: "*"
#            Action: execute-api:Invoke
#            Resource: !Join [ ':', [ 'arn:aws:execute-api', !Ref AWS::Region, !Ref AWS::AccountId, '*/*/*/*' ] ]
#      Roles:
#        - MyApp-PrivateApiGatewayAccountRole
#
#  RestApiDeployment:
#    Type: AWS::ApiGateway::Deployment
#    DependsOn:
#      - HelloWorldGET
#    Properties:
#      RestApiId: !Ref RestApi
#
#  RestApiStageDev:
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      RestApiId: !Ref RestApi
#      StageName: dev
#      DeploymentId: !Ref RestApiDeployment
#      #      TracingEnabled: true
#      AccessLogSetting:
#        #        DestinationArn: !GetAtt KinesisFirehoseLogStream.Arn
#        DestinationArn: !GetAtt RestApiLogGroup.Arn
#        #       https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference?cmpid=docs_apigateway_console
#        Format: "{ 'requestId':'$context.requestId', 'ip': '$context.identity.sourceIp', 'caller':'$context.identity.caller', 'user':'$context.identity.user','requestTime':'$context.requestTime', 'xrayTraceId':'$context.xrayTraceId', 'wafResponseCode':'$context.wafResponseCode', 'httpMethod':'$context.httpMethod','resourcePath':'$context.resourcePath', 'status':'$context.status','protocol':'$context.protocol', 'responseLength':'$context.responseLength' }"
#      MethodSettings:
#        - ResourcePath: "/*"
#          HttpMethod: "*"
#          LoggingLevel: INFO
#          MetricsEnabled: true
#          DataTraceEnabled: true
##          ThrottlingBurstLimit: Integer
##          ThrottlingRateLimit: Double
#
#  HelloWorldApiGatewayResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !GetAtt RestApi.RootResourceId
#      PathPart: hello_world
#      RestApiId: !Ref RestApi
#  HelloWorldGET:
#    Type: AWS::ApiGateway::Method
#    DependsOn:
#      - HelloWorldFunctionApiGatewayPermission
#    Properties:
#      RestApiId: !Ref RestApi
#      ResourceId: !Ref HelloWorldApiGatewayResource
#      HttpMethod: GET
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      RequestValidatorId: !Ref HelloWorldRequestValidator
#      RequestParameters:
#        method.request.querystring.name: true
#      Integration:
#        Type: AWS
#        IntegrationHttpMethod: POST
#        Uri: !Join ['', ['arn:', !Ref AWS::Partition, ':apigateway:', !Ref AWS::Region, ':lambda:path/2015-03-31/functions/', !GetAtt HelloWorldFunction.Arn, '/invocations']]
#        RequestTemplates:
#          application/json: "{\"name\": \"$input.params('name')\"}"
#        IntegrationResponses:
#          - StatusCode: 200
#            ResponseParameters:
#              method.response.header.Access-Control-Allow-Origin: "'*'"
#            ResponseTemplates:
#              application/json: "{\"result\": $input.json('$.body')}"
#      MethodResponses:
#        - StatusCode: 200
#          ResponseModels:
#            application/json: !Ref HelloWorldResponseModel
#          ResponseParameters:
#            method.response.header.Access-Control-Allow-Origin: true
#  HelloWorldRequestValidator:
#    Type: AWS::ApiGateway::RequestValidator
#    Properties:
#      Name: HelloWorldGETValidator
#      RestApiId: !Ref RestApi
#      ValidateRequestBody: false
#      ValidateRequestParameters: true
#  HelloWorldResponseModel:
#    Type: AWS::ApiGateway::Model
#    Properties:
#      Name: HelloWorldResponse
#      RestApiId: !Ref RestApi
#      ContentType: application/json
#      Schema:
#        #        $id: "http://j2clark.com/schemas/jstream/transformresponse.json"
#        $schema: 'http://json-schema.org/draft-07/schema#'
#        type: object
#        properties:
#          result:
#            type: string
#        required:
#          - result
#  HelloWorldFunctionApiGatewayPermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: lambda:InvokeFunction
#      FunctionName: !GetAtt HelloWorldFunction.Arn
#      Principal: apigateway.amazonaws.com
#      SourceArn: !Join [ '', [ 'arn:', !Ref AWS::Partition, ':execute-api:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':', !Ref RestApi, '/*/*' ] ]
#
#  HelloWorldFunction:
#    Type: AWS::Lambda::Function
#    Properties:
#      FunctionName: !Join [ '-', [ !Ref EnvironmentName, !Ref AWS::StackName, 'HelloWorld' ] ]
#      Code:
#        ZipFile: |
#          exports.handler = async (event) => {
#            const response = {
#              body: 'hello ' + event.name + '!'
#            };
#            return response;
#          }
#      Handler: index.handler
#      Role: !Sub
#        - ${ImportedLambdaFunctionRoleArn}
#        - ImportedLambdaFunctionRoleArn: !ImportValue
#            'Fn::Sub': "${EnvironmentName}-LambdaFunctionRoleArn"
#      Runtime: nodejs14.x
##      VpcConfig:
##        SecurityGroupIds:
##          - !Ref LambdaVPCSecurityGroup
##        #        SubnetIds: !Ref Subnets
##        SubnetIds:
##          - !Ref PrivateSubnet1
##          - !Ref PrivateSubnet2