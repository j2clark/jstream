AWSTemplateFormatVersion: 2010-09-09
Description: IAM Policies for Kinesis DeliveryStream

Parameters:
  Region:
    Type: String
    Description: The region for all services to be created
    Default: us-east-1
  S3DeliveryStreamBucket:
    Type: String
    Description: The S3 bucket name where devilerystream data is to be landed
  ProductGroupName:
    Type: String
    Description: The Product GroupName is a pattern which all resource names must begin with

Resources:

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProductGroupName}-lambda-deliveryservice-role"
      Description: "role for lambda functions transforming kinesis deliverystream records"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: 'sts:AssumeRole'
  LambdaServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ProductGroupName}-lambda-deliverystream-policy"
      Roles:
        - !Ref LambdaServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
#          A simple copy of AWSLambdaKinesisExecutionRole
          Effect: Allow
          Action:
            - "kinesis:DescribeStream"
            - "kinesis:DescribeStreamSummary"
            - "kinesis:GetRecords"
            - "kinesis:GetShardIterator"
            - "kinesis:ListShards"
            - "kinesis:ListStreams"
            - "kinesis:SubscribeToShard"
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "*"

  KinesisFirehoseServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProductGroupName}-firehose-deliveryservice-role"
      Description: ""
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
  KinesisFirehoseServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ProductGroupName}-firehose-deliverystream-policy"
      Roles:
        - !Ref KinesisFirehoseServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
#         Cloudwatch Logging
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
#             WE leave it open to read streams from any product group
#             The only limit is streams must be owned by account holder
#              - !Join [':', ['arn:aws:kinesis', !Ref Region, !Ref AWS::AccountId, '*']]
#         S3 Delivery Policy
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref S3DeliveryStreamBucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref S3DeliveryStreamBucket, '/*']]
#         Lambda Execution Policy
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "lambda:GetFunctionConfiguration"
            Resource:
#              - "*"
               - !Join ['', ['arn:aws:lambda:', !Ref Region, ':', !Ref AWS::AccountId, ':function:', !Ref ProductGroupName, '*']]
#         Kinesis Data Stream Source
          - Effect: Allow
            Action:
              - "kinesis:DescribeStream"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
              - "kinesis:ListShards"
#             WE leave it open to read streams from any product group
            Resource: "*"
##         Glue Access
#          - Effect: "Allow",
#            Action:
#              - "glue:GetTable"
#              - "glue:GetTableVersion"
#              - "glue:GetTableVersions"
#            Resource:
#              - !Join [':', ['arn:aws:glue', !Ref Region, !Ref AWS::AccountId, 'catalog']]
#              - !Join [':', ['arn:aws:glue', !Ref Region, !Ref AWS::AccountId, 'database/*']]
#              - !Join [':', ['arn:aws:glue', !Ref Region, !Ref AWS::AccountId, 'table/*']]
##         KMS Decrypt S3 Data
#          - Effect: "Allow",
#            Action:
#              - "kms:GenerateDataKey",
#              - "kms:Decrypt"
#            Resource:
#              - !JOIN ['', ['arn:aws:kms:', !Ref Region, ':', !Ref AWS::AccountId, ':key/', !Ref KmsKeyName]]
#            Condition:
#              StringEquals:
#                "kms:ViaService": "s3.us-east-1.amazonaws.com"
#              StringLike:
#                "kms:EncryptionContext:aws:s3:arn":
#                  - "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/*",
#                  - "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
##         KMS Decrypt Kinesis Data
#          - Effect: "Allow",
#            Action:
#              - "kms:Decrypt"
#            Resource:
#              - !JOIN ['', ['arn:aws:kms:', !Ref Region, ':', !Ref AWS::AccountId, ':key/', !Ref KmsKeyName]]
#            Condition:
#              StringEquals:
#                "kms:ViaService": "kinesis.us-east-1.amazonaws.com"
#              StringLike:
#                "kms:EncryptionContext:aws:kinesis:arn":
#                  - !Join ['', ['arn:aws:kinesis:', !Ref Region, ':', !Ref AWS::AccountId, ':stream/*']]
