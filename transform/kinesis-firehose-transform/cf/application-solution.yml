AWSTemplateFormatVersion: 2010-09-09
Description: IAM Policies for Kinesis DeliveryStream

Parameters:
  Region:
    Type: String
    Description: The region for all services to be created
    Default: "us-east-1"
  ProductGroupName:
    Type: String
    Description: The Product GroupName is a pattern which all resource names must begin with
  S3DeliveryStreamBucket:
    Type: String
    Description: The S3 bucket name where devilerystream data is to be landed
  SourceBucket:
    Type: String
    Description: The S3 bucket name where source code is located
    Default: firehose-deliverystream-test
  SourceKey:
    Type: String
    Description: The object key for the jar or zip file
    Default: code/kinesis-firehose-transform-1.0.jar


Resources:

  #-------------------------------------------------------------------------------
  # IAM RESOURCES
  #-------------------------------------------------------------------------------
  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProductGroupName}-lambda-deliveryservice-role"
      Description: "role for lambda functions transforming kinesis deliverystream records"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
  LambdaServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ProductGroupName}-lambda-deliverystream-policy"
      Roles:
        - !Ref LambdaServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          #          A simple copy of AWSLambdaKinesisExecutionRole
          Effect: Allow
          Action:
            - "kinesis:DescribeStream"
            - "kinesis:DescribeStreamSummary"
            - "kinesis:GetRecords"
            - "kinesis:GetShardIterator"
            - "kinesis:ListShards"
            - "kinesis:ListStreams"
            - "kinesis:SubscribeToShard"
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "*"

  KinesisFirehoseServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProductGroupName}-firehose-deliveryservice-role"
      Description: ""
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
  KinesisFirehoseServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ProductGroupName}-firehose-deliverystream-policy"
      Roles:
        - !Ref KinesisFirehoseServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          #         Cloudwatch Logging
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"
          #             WE leave it open to read streams from any product group
          #             The only limit is streams must be owned by account holder
          #              - !Join [':', ['arn:aws:kinesis', !Ref Region, !Ref AWS::AccountId, '*']]
          #         S3 Delivery Policy
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !Join [ '', [ 'arn:aws:s3:::', !Ref S3DeliveryStreamBucket ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref S3DeliveryStreamBucket, '/*' ] ]
          #         Lambda Execution Policy
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
              - "lambda:GetFunctionConfiguration"
            Resource:
#              - "*"
              - !Join [ '', [ 'arn:aws:lambda:', !Ref Region, ':', !Ref AWS::AccountId, ':function:', !Ref ProductGroupName, '*' ] ]
          #         Kinesis Data Stream Source
          - Effect: Allow
            Action:
              - "kinesis:DescribeStream"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
              - "kinesis:ListShards"
            Resource: "*"
#             WE leave it open to read streams from any product group

  #-------------------------------------------------------------------------------
  # LAMBDA RESOURCES
  #-------------------------------------------------------------------------------
  StockTradeTransformLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProductGroupName}-transformer-stocktrade"
      Description: "Data transformation Lambda for Firehose Delivery Stream"
      Handler: com.j2clark.jstream.kinesis.function.LambdaKinesisTransform
      Role: !GetAtt LambdaServiceRole.Arn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref SourceKey
      #        S3ObjectVersion: !Ref SourceVersion
      Runtime: java11
      MemorySize: 512
      Timeout: 60

  # Limit the number of retries
  StockTradeTransformLambdaEventInvokeConfig:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName: !Ref StockTradeTransformLambdaFunction
      MaximumRetryAttempts: 0
      Qualifier: "$LATEST"

#  StockTradeTransformLambdaLogGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Sub "${ProductGroupName}/${StockTradeTransformLambdaFunction}"
#      RetentionInDays: 7

  StockTradeTransformLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StockTradeTransformLambdaFunction.Arn
      Principal: events.amazonaws.com

  #-------------------------------------------------------------------------------
  # FIREHOSE DELIVERY RESOURCES
  #-------------------------------------------------------------------------------
  ExtendedStockTradeDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "${ProductGroupName}-stocktrade-transformed"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join [ '', [ 'arn:aws:s3:::', !Ref S3DeliveryStreamBucket ] ]
        RoleARN: !GetAtt KinesisFirehoseServiceRole.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 50
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref ProductGroupName
          LogStreamName: "stocktrade"
        CompressionFormat: UNCOMPRESSED
        #       https://docs.aws.amazon.com/firehose/latest/dev/s3-prefixes.html
        #        DynamicPartitioningConfiguration:
        #          Enabled: true
        Prefix: stocktrade/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        ErrorOutputPrefix: errors/stocktrade/
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt StockTradeTransformLambdaFunction.Arn
              Type: Lambda
